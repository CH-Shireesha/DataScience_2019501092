setwd("H:/Specialization/DataScience_2019501092/Data Mining/Exam Solutions/Final exam")
install.packages("arules")
dat$TID <- NULL
library(arules)
write.csv(dat, "Items.csv", quote = FALSE, row.names = TRUE)
transactions = read.transactions("Items.csv", sep=',', rm.duplicates = TRUE)
inspect(transactions)
frequent_itemsets <- apriori(transactions, parameter = list(sup = 0.03, conf = 0.5,target="frequent itemsets"))
inspect(sort(frequent_itemsets)[1:15])
itemFrequencyPlot(transactions, topN = 5)
dat <- read.csv("data", header = TRUE)
dat$TID <- NULL
library(arules)
write.csv(dat, "Items.csv", quote = FALSE, row.names = TRUE)
transactions = read.transactions("Items.csv", sep=',', rm.duplicates = TRUE)
inspect(transactions)
frequent_itemsets <- apriori(transactions, parameter = list(sup = 0.03, conf = 0.5,target="frequent itemsets"))
inspect(sort(frequent_itemsets)[1:15])
itemFrequencyPlot(transactions, topN = 5)
dat <- read.csv("data.csv", header = TRUE)
dat$TID <- NULL
library(arules)
write.csv(dat, "Items.csv", quote = FALSE, row.names = TRUE)
transactions = read.transactions("Items.csv", sep=',', rm.duplicates = TRUE)
inspect(transactions)
frequent_itemsets <- apriori(transactions, parameter = list(sup = 0.03, conf = 0.5,target="frequent itemsets"))
inspect(sort(frequent_itemsets)[1:15])
itemFrequencyPlot(transactions, topN = 5)
dat <- read.csv("lenses.data.csv", header = FALSE)
library(rpart)
y<-as.factor(dat[,5])
x<-dat[,1:4]
mod <- rpart(y~.,x, parms = list(split = 'information'),
control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0,
usesurrogate=0, xval=0,maxdepth=5))
library(rpart.plot)
rpart.plot(mod)
#information gain
ig <- sum(y==predict(mod,x,type="class"))/length(y)
ig
#misclassification error rate
mer <- 1-sum(y==predict(mod,x,type="class"))/length(y)
mer
View(frequent_itemsets)
dat <- read.csv("BSE_Sensex_Index.csv")
sgr <- c()
for (i in 1:15446) {
sgr[i] <- (dat$Close[i]-dat$Close[i+1]/dat$Close[i+1])
}
sgr[15447] <- (sgr[15446]+sgr[15445]+sgr[15444]/3)
sgr[15447]
z_sgr <- c()
sgr_mean <- mean(sgr)
sgr_mean
sgr_sd <- sd(sgr)
sgr_sd
for (j in 1:15447) {
z_sgr[j] <- (sgr[j]-sgr_mean)/(sgr_sd)
}
outl_date <- c()
count <- 0
out <- 1
for (x in 1:15447) {
if(z_sgr[x] > 3){
count <- count+1
outl_date <- dat$Date[x]
out <- out+1
}
if(z_sgr[x] < -3) {
count <- count+1
outl_date <- dat$Date[x]
out <- out+1
}
}
count
outl_date
dat <- read.csv("BSE_Sensex_Index.csv", header = FALSE)
sample_1000 <- sample(seq(1, length(dat[,1])), 1000, replace = T)
sample_3000 <- sample(seq(1, length(dat[,1])), 3000, replace = T)
dat <- read.csv("BSE_Sensex_Index.csv", header = FALSE)
sample_1000 <- sample(seq(1, length(dat[,1])), 1000, replace = T)
sample_3000 <- sample(seq(1, length(dat[,1])), 3000, replace = T)
head(dat)
dat <- read.csv("BSE_Sensex_Index.csv", header = FALSE)
head(dat)
sample_1000 <- sample(seq(1, length(dat[,1])), 1000, replace = T)
sample_3000 <- sample(seq(1, length(dat[,1])), 3000, replace = T)
head(dat)
liver = read.csv("Liver_data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "6", "7"))
str(liver)
summary(liver)
x<-liver[,1:2]
plot(x,pch=19,xlab=expression(x[1]),ylab=expression(x[2]))
fit<-kmeans(x, 4)
points(fit$centers,pch=19,col="blue",cex=2)
library(class)
knnfit<-knn(fit$centers,x,as.factor(c(-1,1)))
points(x,col=1+1*as.numeric(knnfit),pch=19)
install.packages("class")
liver = read.csv("Liver_data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "6", "7"))
str(liver)
summary(liver)
x<-liver[,1:2]
plot(x,pch=19,xlab=expression(x[1]),ylab=expression(x[2]))
fit<-kmeans(x, 4)
points(fit$centers,pch=19,col="blue",cex=2)
library(class)
knnfit<-knn(fit$centers,x,as.factor(c(-1,1)))
points(x,col=1+1*as.numeric(knnfit),pch=19)
install.packages("caret")
liver = read.csv("Liver_data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "6", "7"))
str(liver)
summary(liver)
x<-liver[,1:2]
plot(x,pch=19,xlab=expression(x[1]),ylab=expression(x[2]))
fit<-kmeans(x, 4)
points(fit$centers,pch=19,col="blue",cex=2)
library(class)
knnfit<-knn(fit$centers,x,as.factor(c(-1,1)))
points(x,col=1+1*as.numeric(knnfit),pch=19)
liver = read.csv("Liver_data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "6", "7"))
str(liver)
summary(liver)
x<-liver[,1:2]
plot(x,pch=19,xlab=expression(x[1]),ylab=expression(x[2]))
fit<-kmeans(x, 4)
points(fit$centers,pch=19,col="blue",cex=2)
library(class)
library(caret)
knnfit<-knn(fit$centers,x,as.factor(c(-1,1)))
points(x,col=1+1*as.numeric(knnfit),pch=19)
dat <- read.csv("lenses.data.csv", header = FALSE)
library(rpart)
y<-as.factor(dat[,5])
x<-dat[,1:4]
mod <- rpart(y~.,x, parms = list(split = 'information'),
control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0,
usesurrogate=0, xval=0,maxdepth=5))
library(rpart.plot)
rpart.plot(mod)
#information gain
ig <- sum(y==predict(mod,x,type="class"))/length(y)
ig
#misclassification error rate
mer <- 1-sum(y==predict(mod,x,type="class"))/length(y)
mer
dat <- read.csv("lenses.data.csv", header = FALSE, col.names = c("index", "age", "spectacle_prescription", "astigmatic", "tear_production_rate", "Class"))
library(rpart)
y<-as.factor(dat[,5])
x<-dat[,1:4]
mod <- rpart(y~.,x, parms = list(split = 'information'),
control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0,
usesurrogate=0, xval=0,maxdepth=5))
library(rpart.plot)
rpart.plot(mod)
#information gain
ig <- sum(y==predict(mod,x,type="class"))/length(y)
ig
#misclassification error rate
mer <- 1-sum(y==predict(mod,x,type="class"))/length(y)
mer
dat <- read.csv("lenses.data.csv", header = FALSE)
dat$index <- NULL
library(rpart)
y<-as.factor(dat[,5])
x<-dat[,1:4]
mod <- rpart(y~.,x, parms = list(split = 'information'),
control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0,
usesurrogate=0, xval=0,maxdepth=5))
library(rpart.plot)
rpart.plot(mod)
#information gain
ig <- sum(y==predict(mod,x,type="class"))/length(y)
ig
#misclassification error rate
mer <- 1-sum(y==predict(mod,x,type="class"))/length(y)
mer
dat <- read.csv("lenses.data.csv", header = FALSE)
dat$v1 <- NULL
library(rpart)
y<-as.factor(dat[,5])
x<-dat[,1:4]
mod <- rpart(y~.,x, parms = list(split = 'information'),
control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0,
usesurrogate=0, xval=0,maxdepth=5))
library(rpart.plot)
rpart.plot(mod)
#information gain
ig <- sum(y==predict(mod,x,type="class"))/length(y)
ig
#misclassification error rate
mer <- 1-sum(y==predict(mod,x,type="class"))/length(y)
mer
dat <- read.csv("lenses.data.csv", header = FALSE, col.names = c("index", "age", "spectacle_prescription", "astigmatic", "tear_production_rate", "Class"))
dat$index <- NULL
library(rpart)
y<-as.factor(dat[,5])
x<-dat[,1:4]
mod <- rpart(y~.,x, parms = list(split = 'information'),
control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0,
usesurrogate=0, xval=0,maxdepth=5))
library(rpart.plot)
rpart.plot(mod)
#information gain
ig <- sum(y==predict(mod,x,type="class"))/length(y)
ig
#misclassification error rate
mer <- 1-sum(y==predict(mod,x,type="class"))/length(y)
mer
data <- read.csv("Liver_data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "6", "7"))
str(data)
summary(data)
x = data[,1:5]
y = data[,6]
fit = kmeans(x,4)
library(class)
knnfit = knn(fit$centers,x,as.factor(c(-2,-1,1,2)))
error = 1-sum(knnfit == y)/length(y)
error
dat <- read.csv("Liver_data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "6", "7"))
summary(dat)
x<-dat[,1:2]
plot(x,pch=19,xlab=expression(x[1]),ylab=expression(x[2]))
fit<-kmeans(x, 4)
points(fit$centers,pch=19,col="blue",cex=2)
library(class)
library(caret)
knnfit<-knn(fit$centers,x,as.factor(c(-1,1)))
points(x,col=1+1*as.numeric(knnfit),pch=19)
dat <- read.csv("Liver_data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "6", "7"))
str(dat)
summary(dat)
x = dat[,1:5]
y = dat[,6]
fit = kmeans(x,4)
library(class)
knnfit = knn(fit$centers,x,as.factor(c(-2,-1,1,2)))
error = 1-sum(knnfit == y)/length(y)
error
dat <- read.csv("Liver_data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "6", "7"))
summary(dat)
x = dat[,1:5]
y = dat[,6]
fit = kmeans(x,4)
library(class)
knnfit = knn(fit$centers,x,as.factor(c(-2,-1,1,2)))
error = 1-sum(knnfit == y)/length(y)
error
dat <- read.csv("BSE_Sensex_Index.csv", header = FALSE)
head(dat)
sample_1000 <- sample(seq(1, length(dat[,1])), 1000, replace = T)
sample_3000 <- sample(seq(1, length(dat[,1])), 3000, replace = T)
head(dat)
mean(sample_1000)		7771.474
max(sample_1000)		15424
var(sample_1000)		20185607
quantile(sample_1000,.25)	3894
mean(sample_3000)		7858.797
max(sample_3000)		15445
var(sample_3000)		20051208
quantile(sample_3000,.25)	4048.75
stock <- read.csv("BSE_Sensex_Index.csv", header = FALSE)
stockk$diffV2 <- c(0, diff(stock$V2))
stock$diffV3 <- c(0, diff(stock$V3))
stock$diffV4 <- c(0, diff(stock$V4))
stock$diffV5 <- c(0, diff(stock$V5))
stock$diffV6 <- c(0, diff(stock$V6))
stock$diffV7 <- c(0, diff(stock$V7))
sample_1000 <- sample(seq(1, length(dat[,1])), 1000, replace = T)
sample_3000 <- sample(seq(1, length(dat[,1])), 3000, replace = T)
head(dat)
mean(sample_1000)
max(sample_1000)
var(sample_1000)
quantile(sample_1000,.25)
mean(sample_3000)
max(sample_3000)
var(sample_3000)
quantile(sample_3000,.25)
mean(stock$V2, na.rm = TRUE)
View(dat)
mean(stock$V2, na.rm = TRUE)
mean(stock$v2, na.rm = TRUE)
stock <- read.csv("BSE_Sensex_Index.csv", header = FALSE)
sample_1000 <- sample(seq(1, length(dat[,1])), 1000, replace = T)
sample_3000 <- sample(seq(1, length(dat[,1])), 3000, replace = T)
head(dat)
mean(sample_1000)
max(sample_1000)
var(sample_1000)
quantile(sample_1000,.25)
mean(sample_3000)
max(sample_3000)
var(sample_3000)
quantile(sample_3000,.25)
mean(stock$v2, na.rm = TRUE)
boxplot(open_points, high_ponts, low_ponts, close_ponts,
main = "BoxPlot for the values",
names = c("Open", "High", "Low", "Close"),
col = c("orange", "red"),
horizontal = TRUE,
notch = TRUE)
boxplot(stock$diffV2,
stock$diffV3,
stock$diffV4,
stock$diffV5,
stock$diffV6,
stock$diffV7
,col = 'blue', main = 'Boxplot', names=c("Open","High", "Low", "Close", "volume", "adj"))
stock <- read.csv("BSE_Sensex_Index.csv", header = FALSE)
stock$diffV2 <- c(0, diff(stock$V2))
stock$diffV3 <- c(0, diff(stock$V3))
stock$diffV4 <- c(0, diff(stock$V4))
stock$diffV5 <- c(0, diff(stock$V5))
stock$diffV6 <- c(0, diff(stock$V6))
stock$diffV7 <- c(0, diff(stock$V7))
#sample_1000 <- sample(seq(1, length(dat[,1])), 1000, replace = T)
#sample_3000 <- sample(seq(1, length(dat[,1])), 3000, replace = T)
#mean(sample_1000)
#max(sample_1000)
#var(sample_1000)
#quantile(sample_1000,.25)
#mean(sample_3000)
#max(sample_3000)
#var(sample_3000)
#quantile(sample_3000,.25)
#mean(stock$v2, na.rm = TRUE)
#boxplot(open_points, high_ponts, low_ponts, close_ponts,
#main = "BoxPlot for the values",
#names = c("Open", "High", "Low", "Close"),
#col = c("orange", "red"),
#horizontal = TRUE,
#notch = TRUE)
sample1 = sample(seq(1,length(stock$V2)),1000,replace = T)
sample2 = sample(seq(1,length(stock$V2)),3000,replace = T)
#For your samples, use the functions mean(), max(), var() and quantile(,.25)
#to compute the mean, maximum, variance and 1st quartile respectively for each column which has successive differences.
#Column - 8 (V2)
sampleV2_1 = stock[sample1,8]
mean(sampleV2_1)
max(sampleV2_1)
var(sampleV2_1)
quantile(sampleV2_1,.25)
sampleV2_2 = stock[sample2,8]
mean(sampleV2_2)
max(sampleV2_2)
var(sampleV2_2)
quantile(sampleV2_2,.25)
#Column - 9 (V3)
sampleV3_1 = stock[sample1,9]
mean(sampleV3_1)
max(sampleV3_1)
var(sampleV3_1)
quantile(sampleV3_1,.25)
sampleV3_2 = stock[sample2,9]
mean(sampleV3_2)
max(sampleV3_2)
var(sampleV3_2)
quantile(sampleV3_2,.25)
#Column - 10 (V4)
sampleV4_1 = stock[sample1,10]
mean(sampleV4_1)
max(sampleV4_1)
var(sampleV4_1)
quantile(sampleV4_1,.25)
sampleV4_2 = stock[sample2,10]
mean(sampleV4_2)
max(sampleV4_2)
var(sampleV4_2)
quantile(sampleV4_2,.25)
#Column - 11 (V5)
sampleV5_1 = stock[sample1,11]
mean(sampleV5_1)
max(sampleV5_1)
var(sampleV5_1)
quantile(sampleV5_1,.25)
sampleV5_2 = stock[sample2,11]
mean(sampleV5_2)
max(sampleV5_2)
var(sampleV5_2)
quantile(sampleV5_2,.25)
#Column - 12 (V6)
sampleV6_1 = stock[sample1,12]
mean(sampleV6_1)
max(sampleV6_1)
var(sampleV6_1)
quantile(sampleV6_1,.25)
sampleV6_2 = stock[sample2,12]
mean(sampleV6_2)
max(sampleV6_2)
var(sampleV6_2)
quantile(sampleV6_2,.25)
#Column - 13 (V7)
sampleV7_1 = stock[sample1,13]
mean(sampleV7_1)
max(sampleV7_1)
var(sampleV7_1)
quantile(sampleV7_1,.25)
sampleV7_2 = stock[sample2,13]
mean(sampleV7_2)
max(sampleV7_2)
var(sampleV7_2)
quantile(sampleV7_2,.25)
#Compute the same quantities in part b on the entire data set and show your answers.
#How much do they differ from your answers in part b? Do you find any significant difference between two sample values
#like mean in comparison with entire data? If so what explanation you can give for that?
#Column 8
mean(stock$diffV2)
max(stock$diffV2)
var(stock$diffV2)
quantile(stock$diffV2,.25)
#how much they differ?
abs(mean(sampleV2_1)-mean(stock$diffV2))
abs(max(sampleV2_1)-max(stock$diffV2))
abs(var(sampleV2_1)-var(stock$diffV2))
abs(quantile(sampleV2_1,.25)-quantile(stock$diffV2,.25))
abs(mean(sampleV2_2)-mean(stock$diffV2))
abs(max(sampleV2_2)-max(stock$diffV2))
abs(var(sampleV2_2)-var(stock$diffV2))
abs(quantile(sampleV2_2,.25)-quantile(stock$diffV2,.25))
#The difference between these two sample valeues is : Difference is low when the sample size is large
#The maximum value of the column is nearer to the value of larger sample size
#The differnce in variance is higher when the sample size is more
#Column 9
mean(stock$diffV3)
max(stock$diffV3)
var(stock$diffV3)
quantile(stock$diffV3,.25)
#how much they differ?
abs(mean(sampleV3_1)-mean(stock$diffV3))
abs(max(sampleV3_1)-max(stock$diffV3))
abs(var(sampleV3_1)-var(stock$diffV3))
abs(quantile(sampleV3_1,.25)-quantile(stock$diffV3,.25))
abs(mean(sampleV3_2)-mean(stock$diffV3))
abs(max(sampleV3_2)-max(stock$diffV3))
abs(var(sampleV3_2)-var(stock$diffV3))
abs(quantile(sampleV3_2,.25)-quantile(stock$diffV3,.25))
#Column 10
mean(stock$diffV4)
max(stock$diffV4)
var(stock$diffV4)
quantile(stock$diffV4,.25)
#how much they differ?
abs(mean(sampleV4_1)-mean(stock$diffV4))
abs(max(sampleV4_1)-max(stock$diffV4))
abs(var(sampleV4_1)-var(stock$diffV4))
abs(quantile(sampleV4_1,.25)-quantile(stock$diffV4,.25))
abs(mean(sampleV4_2)-mean(stock$diffV4))
abs(max(sampleV4_2)-max(stock$diffV4))
abs(var(sampleV4_2)-var(stock$diffV4))
abs(quantile(sampleV4_2,.25)-quantile(stock$diffV4,.25))
#Column 11
mean(stock$diffV5)
max(stock$diffV5)
var(stock$diffV5)
quantile(stock$diffV5,.25)
#how much they differ?
abs(mean(sampleV5_1)-mean(stock$diffV5))
abs(max(sampleV5_1)-max(stock$diffV5))
abs(var(sampleV5_1)-var(stock$diffV5))
abs(quantile(sampleV5_1,.25)-quantile(stock$diffV5,.25))
abs(mean(sampleV5_2)-mean(stock$diffV5))
abs(max(sampleV5_2)-max(stock$diffV5))
abs(var(sampleV5_2)-var(stock$diffV5))
abs(quantile(sampleV5_2,.25)-quantile(stock$diffV5,.25))
#Column 12
mean(stock$diffV6)
max(stock$diffV6)
var(stock$diffV6)
quantile(stock$diffV6,.25)
#how much they differ?
abs(mean(sampleV6_1)-mean(stock$diffV6))
abs(max(sampleV6_1)-max(stock$diffV6))
abs(var(sampleV6_1)-var(stock$diffV6))
abs(quantile(sampleV6_1,.25)-quantile(stock$diffV6,.25))
abs(mean(sampleV6_2)-mean(stock$diffV6))
abs(max(sampleV6_2)-max(stock$diffV6))
abs(var(sampleV6_2)-var(stock$diffV6))
abs(quantile(sampleV6_2,.25)-quantile(stock$diffV6,.25))
#Column 13
mean(stock$diffV7)
max(stock$diffV7)
var(stock$diffV7)
quantile(stock$diffV7,.25)
#how much they differ?
abs(mean(sampleV7_1)-mean(stock$diffV7))
abs(max(sampleV7_1)-max(stock$diffV7))
abs(var(sampleV7_1)-var(stock$diffV7))
abs(quantile(sampleV7_1,.25)-quantile(stock$diffV7,.25))
abs(mean(sampleV7_2)-mean(stock$diffV7))
abs(max(sampleV7_2)-max(stock$diffV7))
abs(var(sampleV7_2)-var(stock$diffV7))
abs(quantile(sampleV7_2,.25)-quantile(stock$diffV7,.25))
#Use R to produce a single graph displaying a boxplot for open, close, high and low.
#Include the R commands and the plot.
boxplot(stock$diffV2,
stock$diffV3,
stock$diffV4,
stock$diffV5,
stock$diffV6,
stock$diffV7
,col = 'blue', main = 'Boxplot', names=c("Open","High", "Low", "Close", "volume", "adj"))
#Use R to produce a frequency histogram for Close values. Use intervals of width 2000 beginning at 0
stock$c = as.numeric(stock$V4)
hist(stock$c,breaks=seq(0,20000,by=2000),col='blue',xlab = "Close",ylab = "Frequency",main = "Histogram Plot")
boxplot(stock$diffV2,
stock$diffV3,
stock$diffV4,
stock$diffV5,
stock$diffV6,
stock$diffV7
,col = 'blue', main = 'Boxplot', names=c("Open","High", "Low", "Close", "volume", "adj"))
